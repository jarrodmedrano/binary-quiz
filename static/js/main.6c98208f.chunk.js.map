{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","useState","digits","setDigits","binaryNum","setBinaryNum","placeValueMap","setPlaceValueMap","binarySum","setBinarySum","showSum","setShowSum","showPlaceValue","setShowPlaceValue","showSolution","setShowAddition","renderedString","setRenderedString","solutionString","setSolutionString","useEffect","binaryString","i","Math","random","generateRandomBinary","string","split","reverse","map","digit","index","placeValue","pow","mapPlaceValues","sum","reduce","acc","curr","binaryToDec","item","className","key","renderString","concat","join","renderSolution","console","log","class","onClick","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.6c98208f.chunk.js","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport './App.css';\n\nfunction App() {\n  const [digits, setDigits] = useState(0);\n  const [binaryNum, setBinaryNum] = useState('');\n  const [placeValueMap, setPlaceValueMap] = useState([]);\n  const [binarySum, setBinarySum] = useState(0);\n  const [showSum, setShowSum] = useState(false);\n  const [showPlaceValue, setShowPlaceValue] = useState(false);\n  const [showSolution, setShowAddition] = useState(false);\n  const [renderedString, setRenderedString] = useState([]);\n  const [solutionString, setSolutionString] = useState('');\n  \n\n  function generateRandomBinary(digits) {\n    let binaryString = '';\n\n    for(let i = 0; i < digits; i++) {\n      binaryString += (Math.random()>0.5)? 1 : 0;\n    }\n\n    setBinaryNum(binaryString);\n  }\n\n  function mapPlaceValues(string) {\n    const reversed = string.split('').reverse();\n    const placeValueMap = reversed.map((digit, index) => {\n      if(index === 0) return {\n        placeValue: 1,\n        digit: digit\n      } \n      return {\n        placeValue: Math.pow(2,index),\n        digit: digit\n      }\n    });\n\n    setPlaceValueMap(placeValueMap);\n  }\n\n  function renderString() {\n    const string = placeValueMap.map((item, index) => {\n      return (\n        <span className=\"binaryString\" key={index}>\n          {item.digit} <sup className={showPlaceValue === true ? \"show\" : \"hide\"}><span className={item.digit == 1 ? \"success\" : \"gray\"}>{item.placeValue}</span></sup>\n        </span>\n      )\n    })\n\n    setRenderedString(string.reverse());\n  }\n\n  function renderSolution() {\n    const string = placeValueMap.reduce((acc, curr, index) => {\n      return curr.digit == 0 ? acc : acc.concat(curr.placeValue);\n    }, []);\n    setSolutionString(string.join('+'));\n  }\n\n  function binaryToDec() {\n    const sum = placeValueMap.reduce((acc, curr) => {\n      if(curr.digit == 0) return acc;\n      // setAdditionString(`${curr.placeValue} + ${acc}`);\n      return curr.placeValue + acc;\n    }, 0);\n\n    setBinarySum(sum);\n  }\n\n  useEffect(() => {\n    generateRandomBinary(digits);\n  }, [digits])\n\n  useEffect(() => {\n    mapPlaceValues(binaryNum);\n  }, [binaryNum]);\n\n  useEffect(() => {\n    binaryToDec();\n    renderString();\n    renderSolution();\n  }, [placeValueMap, showPlaceValue])\n\n  useEffect(() => {\n    setDigits(5);\n  }, [])\n\n  useEffect(() => {\n    console.log(showPlaceValue);\n  }, [showPlaceValue])\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        Binary Quiz\n      </header>\n\n      <p>{ \n    renderedString\n      }<sub>2</sub>\n      </p>\n\n    <p class=\"success\"><strong>{showSum ? binarySum : null}</strong></p>\n\n    <p><small>{showSolution ? `${solutionString} = ${binarySum}` : null}</small></p>\n      <button onClick={() => setDigits(digits - 1)}>\n        -\n      </button>\n      <button onClick={() => setDigits(digits + 1)}>\n        +\n      </button>\n      <button onClick={() => setShowSum(!showSum)}>\n        {showSum ? 'Hide result' : 'Show result'}\n      </button>\n      <button onClick={() => setShowPlaceValue(!showPlaceValue)}>\n        {showPlaceValue ? 'Hide Place Values' : 'Show place Values'}\n      </button>\n      <button onClick={() => setShowAddition(!showSolution)}>\n        {showSolution ? 'Hide Calculation' : 'Show Calculation'}\n      </button>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}